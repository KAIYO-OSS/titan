{
  "values": [
    {
      "isRequired": "true",
      "name": "global.imagePullSecrets",
      "value": "[]",
      "description": "Global Docker registry secret names as an array (does not add image pull secrets to deployed pods)"
    },
    {
      "isRequired": "true",
      "name": "clusterDomain",
      "value": "cluster.local",
      "description": "Default Kubernetes cluster domain"
    },
    {
      "isRequired": "true",
      "name": "image.registry",
      "value": "docker.io",
      "description": "MongoDB image registry"
    },
    {
      "isRequired": "true",
      "name": "image.repository",
      "value": "bitnami/mongodb",
      "description": "MongoDB image name"
    },
    {
      "isRequired": "true",
      "name": "image.tag",
      "value": "{TAG_NAME}",
      "description": "MongoDB image tag"
    },
    {
      "isRequired": "true",
      "name": "image.pullPolicy",
      "value": "IfNotPresent",
      "description": "MongoDB image pull policy"
    },
    {
      "isRequired": "true",
      "name": "image.pullSecrets",
      "value": "[]",
      "description": "Specify docker-registry secret names as an array (does not add image pull secrets to deployed pods)"
    },
    {
      "isRequired": "true",
      "name": "image.debug",
      "value": "false",
      "description": "Set to true if you would like to see extra information on logs"
    },
    {
      "isRequired": "true",
      "name": "architecture",
      "value": "standalone",
      "description": "MongoDB architecture (standalone or replicaset)"
    },
    {
      "isRequired": "true",
      "name": "useStatefulSet",
      "value": "false",
      "description": "Set to true to use a StatefulSet instead of a Deployment (only when architecture=standalone)"
    },
    {
      "isRequired": "true",
      "name": "auth.enabled",
      "value": "true",
      "description": "Enable authentication"
    },
    {
      "isRequired": "true",
      "name": "auth.rootPassword",
      "value": "_random 10 character long alphanumeric string_",
      "description": "MongoDB admin password"
    },
    {
      "isRequired": "true",
      "name": "auth.password",
      "value": "_random 10 character long alphanumeric string_",
      "description": "MongoDB custom user password"
    },
    {
      "isRequired": "true",
      "name": "auth.replicaSetKey",
      "value": "_random 10 character long alphanumeric string_",
      "description": "Key used for authentication in the replicaset (only when architecture=replicaset)"
    },
    {
      "isRequired": "true",
      "name": "replicaSetName",
      "value": "rs0",
      "description": "Name of the replica set (only when architecture=replicaset)"
    },
    {
      "isRequired": "true",
      "name": "replicaSetHostnames",
      "value": "true",
      "description": "Enable DNS hostnames in the replicaset config (only when architecture=replicaset)"
    },
    {
      "isRequired": "true",
      "name": "enableIPv6",
      "value": "false",
      "description": "Switch to enable/disable IPv6 on MongoDB"
    },
    {
      "isRequired": "true",
      "name": "directoryPerDB",
      "value": "false",
      "description": "Switch to enable/disable DirectoryPerDB on MongoDB"
    },
    {
      "isRequired": "true",
      "name": "systemLogVerbosity",
      "value": "0",
      "description": "MongoDB system log verbosity level"
    },
    {
      "isRequired": "true",
      "name": "disableSystemLog",
      "value": "false",
      "description": "Switch to enable/disable MongoDB system log"
    },
    {
      "isRequired": "true",
      "name": "configuration",
      "value": "{}",
      "description": "MongoDB configuration file to be used"
    },
    {
      "isRequired": "true",
      "name": "extraFlags",
      "value": "[]",
      "description": "MongoDB additional command line flags"
    },
    {
      "isRequired": "true",
      "name": "extraEnvVars",
      "value": "[]",
      "description": "Extra environment variables to add to MongoDB pods"
    },
    {
      "isRequired": "true",
      "name": "replicaCount",
      "value": "2",
      "description": "Number of MongoDB nodes (only when architecture=replicaset)"
    },
    {
      "isRequired": "true",
      "name": "labels",
      "value": "{}",
      "description": "Annotations to be added to the MongoDB statefulset (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "annotations",
      "value": "{}",
      "description": "Additional labels to be added to the MongoDB statefulset (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "podManagementPolicy",
      "value": "OrderedReady",
      "description": "Pod management policy for MongoDB"
    },
    {
      "isRequired": "true",
      "name": "strategyType",
      "value": "RollingUpdate",
      "description": "StrategyType for MongoDB statefulset"
    },
    {
      "isRequired": "true",
      "name": "podLabels",
      "value": "{}",
      "description": "MongoDB pod labels (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "podAnnotations",
      "value": "{}",
      "description": "MongoDB Pod annotations (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "priorityClassName",
      "value": "\"\"",
      "description": "Name of the existing priority class to be used by MongoDB pod(s)"
    },
    {
      "isRequired": "true",
      "name": "affinity",
      "value": "{}",
      "description": "Affinity for MongoDB pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "nodeSelector",
      "value": "{}",
      "description": "Node labels for MongoDB pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "tolerations",
      "value": "[]",
      "description": "Tolerations for MongoDB pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "podSecurityContext",
      "value": "Check values.yaml file",
      "description": "MongoDB pod(s)' Security Context"
    },
    {
      "isRequired": "true",
      "name": "containerSecurityContext",
      "value": "Check values.yaml file",
      "description": "MongoDB containers' Security Context"
    },
    {
      "isRequired": "true",
      "name": "resources.limits",
      "value": "{}",
      "description": "The resources limits for MongoDB containers"
    },
    {
      "isRequired": "true",
      "name": "resources.requests",
      "value": "{}",
      "description": "The requested resources for MongoDB containers"
    },
    {
      "isRequired": "true",
      "name": "livenessProbe",
      "value": "Check values.yaml file",
      "description": "Liveness probe configuration for MongoDB"
    },
    {
      "isRequired": "true",
      "name": "readinessProbe",
      "value": "Check values.yaml file",
      "description": "Readiness probe configuration for MongoDB"
    },
    {
      "isRequired": "true",
      "name": "pdb.create",
      "value": "false",
      "description": "Enable/disable a Pod Disruption Budget creation for MongoDB pod(s)"
    },
    {
      "isRequired": "true",
      "name": "pdb.minAvailable",
      "value": "1",
      "description": "Minimum number/percentage of MongoDB pods that should remain scheduled"
    },
    {
      "isRequired": "true",
      "name": "initContainers",
      "value": "{}",
      "description": "Add additional init containers for the MongoDB pod(s) (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "sidecars",
      "value": "{}",
      "description": "Add additional sidecar containers for the MongoDB pod(s) (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "extraVolumeMounts",
      "value": "{}",
      "description": "Optionally specify extra list of additional volumeMounts for the MongoDB container(s)"
    },
    {
      "isRequired": "true",
      "name": "extraVolumes",
      "value": "{}",
      "description": "Optionally specify extra list of additional volumes to the MongoDB statefulset"
    },
    {
      "isRequired": "true",
      "name": "service.type",
      "value": "ClusterIP",
      "description": "Kubernetes Service type"
    },
    {
      "isRequired": "true",
      "name": "service.port",
      "value": "27017",
      "description": "MongoDB service port"
    },
    {
      "isRequired": "true",
      "name": "service.portName",
      "value": "mongodb",
      "description": "MongoDB service port name"
    },
    {
      "isRequired": "true",
      "name": "service.nodePort",
      "value": "\"\"",
      "description": "Port to bind to for NodePort and LoadBalancer service types"
    },
    {
      "isRequired": "true",
      "name": "service.loadBalancerSourceRanges",
      "value": "[]",
      "description": "Address(es) that are allowed when service is LoadBalancer"
    },
    {
      "isRequired": "true",
      "name": "service.annotations",
      "value": "{}",
      "description": "Service annotations (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.enabled",
      "value": "false",
      "description": "Enable Kubernetes external cluster access to MongoDB nodes"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.enabled",
      "value": "false",
      "description": "Enable using an init container to auto-detect external IPs by querying the K8s API"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.image.registry",
      "value": "docker.io",
      "description": "Init container auto-discovery image registry (kubectl)"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.image.repository",
      "value": "bitnami/kubectl",
      "description": "Init container auto-discovery image name (kubectl)"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.image.tag",
      "value": "{TAG_NAME}",
      "description": "Init container auto-discovery image tag (kubectl)"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.image.pullPolicy",
      "value": "Always",
      "description": "Init container auto-discovery image pull policy (kubectl)"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.resources.limits",
      "value": "{}",
      "description": "Init container auto-discovery resource limits"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.autoDiscovery.resources.requests",
      "value": "{}",
      "description": "Init container auto-discovery resource requests"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.type",
      "value": "LoadBalancer",
      "description": "Kubernetes Servive type for external access. It can be NodePort or LoadBalancer"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.port",
      "value": "27017",
      "description": "MongoDB port used for external access when service type is LoadBalancer"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.loadBalancerIPs",
      "value": "[]",
      "description": "Array of load balancer IPs for MongoDB nodes"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.loadBalancerSourceRanges",
      "value": "[]",
      "description": "Address(es) that are allowed when service is LoadBalancer"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.nodePorts",
      "value": "[]",
      "description": "Array of node ports used to configure MongoDB advertised hostname when service type is NodePort"
    },
    {
      "isRequired": "true",
      "name": "externalAccess.service.annotations",
      "value": "{}",
      "description": "Service annotations for external access (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "persistence.enabled",
      "value": "true",
      "description": "Enable MongoDB data persistence using PVC"
    },
    {
      "isRequired": "true",
      "name": "persistence.accessMode",
      "value": "ReadWriteOnce",
      "description": "PVC Access Mode for MongoDB data volume"
    },
    {
      "isRequired": "true",
      "name": "persistence.size",
      "value": "8Gi",
      "description": "PVC Storage Request for MongoDB data volume"
    },
    {
      "isRequired": "true",
      "name": "persistence.mountPath",
      "value": "/bitnami/mongodb",
      "description": "Path to mount the volume at"
    },
    {
      "isRequired": "true",
      "name": "persistence.subPath",
      "value": "\"\"",
      "description": "Subdirectory of the volume to mount at"
    },
    {
      "isRequired": "true",
      "name": "serviceAccount.create",
      "value": "true",
      "description": "Enable creation of ServiceAccount for MongoDB pods"
    },
    {
      "isRequired": "true",
      "name": "serviceAccount.name",
      "value": "Generated using the mongodb.fullname template",
      "description": "Name of the created serviceAccount"
    },
    {
      "isRequired": "true",
      "name": "rbac.create",
      "value": "false",
      "description": "Weather to create & use RBAC resources or not"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.enabled",
      "value": "false",
      "description": "Enable init container that changes the owner and group of the persistent volume(s) mountpoint to runAsUser:fsGroup"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.image.registry",
      "value": "docker.io",
      "description": "Init container volume-permissions image registry"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.image.repository",
      "value": "bitnami/minideb",
      "description": "Init container volume-permissions image name"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.image.tag",
      "value": "buster",
      "description": "Init container volume-permissions image tag"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.image.pullPolicy",
      "value": "Always",
      "description": "Init container volume-permissions image pull policy"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.image.pullSecrets",
      "value": "[]",
      "description": "Specify docker-registry secret names as an array (does not add image pull secrets to deployed pods)"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.resources.limits",
      "value": "{}",
      "description": "Init container volume-permissions resource  limits"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.resources.requests",
      "value": "{}",
      "description": "Init container volume-permissions resource  requests"
    },
    {
      "isRequired": "true",
      "name": "volumePermissions.securityContext",
      "value": "Check values.yaml file",
      "description": "Security context of the init container"
    },
    {
      "isRequired": "true",
      "name": "arbiter.enabled",
      "value": "true",
      "description": "Enable deploying the arbiter"
    },
    {
      "isRequired": "true",
      "name": "arbiter.configuration",
      "value": "{}",
      "description": "Arbiter configuration file to be used"
    },
    {
      "isRequired": "true",
      "name": "arbiter.extraFlags",
      "value": "[]",
      "description": "Arbiter additional command line flags"
    },
    {
      "isRequired": "true",
      "name": "arbiter.extraEnvVars",
      "value": "[]",
      "description": "Extra environment variables to add to Arbiter pods"
    },
    {
      "isRequired": "true",
      "name": "arbiter.labels",
      "value": "{}",
      "description": "Annotations to be added to the Arbiter statefulset (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.annotations",
      "value": "{}",
      "description": "Additional labels to be added to the Arbiter statefulset (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.podLabels",
      "value": "{}",
      "description": "Arbiter pod labels (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.podAnnotations",
      "value": "{}",
      "description": "Arbiter Pod annotations (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.priorityClassName",
      "value": "\"\"",
      "description": "Name of the existing priority class to be used by Arbiter pod(s)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.affinity",
      "value": "{}",
      "description": "Affinity for Arbiter pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.nodeSelector",
      "value": "{}",
      "description": "Node labels for Arbiter pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.tolerations",
      "value": "[]",
      "description": "Tolerations for Arbiter pod(s) assignment (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.podSecurityContext",
      "value": "Check values.yaml file",
      "description": "Arbiter pod(s)' Security Context"
    },
    {
      "isRequired": "true",
      "name": "arbiter.containerSecurityContext",
      "value": "Check values.yaml file",
      "description": "Arbiter containers' Security Context"
    },
    {
      "isRequired": "true",
      "name": "arbiter.resources.limits",
      "value": "{}",
      "description": "The resources limits for Arbiter containers"
    },
    {
      "isRequired": "true",
      "name": "arbiter.resources.requests",
      "value": "{}",
      "description": "The requested resources for Arbiter containers"
    },
    {
      "isRequired": "true",
      "name": "arbiter.livenessProbe",
      "value": "Check values.yaml file",
      "description": "Liveness probe configuration for Arbiter"
    },
    {
      "isRequired": "true",
      "name": "arbiter.readinessProbe",
      "value": "Check values.yaml file",
      "description": "Readiness probe configuration for Arbiter"
    },
    {
      "isRequired": "true",
      "name": "arbiter.pdb.create",
      "value": "false",
      "description": "Enable/disable a Pod Disruption Budget creation for Arbiter pod(s)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.pdb.minAvailable",
      "value": "1",
      "description": "Minimum number/percentage of Arbiter pods that should remain scheduled"
    },
    {
      "isRequired": "true",
      "name": "arbiter.initContainers",
      "value": "{}",
      "description": "Add additional init containers for the Arbiter pod(s) (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.sidecars",
      "value": "{}",
      "description": "Add additional sidecar containers for the Arbiter pod(s) (evaluated as a template)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.extraVolumeMounts",
      "value": "{}",
      "description": "Optionally specify extra list of additional volumeMounts for the Arbiter container(s)"
    },
    {
      "isRequired": "true",
      "name": "arbiter.extraVolumes",
      "value": "{}",
      "description": "Optionally specify extra list of additional volumes to the Arbiter statefulset"
    },
    {
      "isRequired": "true",
      "name": "metrics.enabled",
      "value": "false",
      "description": "Enable using a sidecar Prometheus exporter"
    },
    {
      "isRequired": "true",
      "name": "metrics.image.registry",
      "value": "docker.io",
      "description": "MongoDB Prometheus exporter image registry"
    },
    {
      "isRequired": "true",
      "name": "metrics.image.repository",
      "value": "bitnami/mongodb-exporter",
      "description": "MongoDB Prometheus exporter image name"
    },
    {
      "isRequired": "true",
      "name": "metrics.image.tag",
      "value": "{TAG_NAME}",
      "description": "MongoDB Prometheus exporter image tag"
    },
    {
      "isRequired": "true",
      "name": "metrics.image.pullPolicy",
      "value": "Always",
      "description": "MongoDB Prometheus exporter image pull policy"
    },
    {
      "isRequired": "true",
      "name": "metrics.image.pullSecrets",
      "value": "[]",
      "description": "Specify docker-registry secret names as an array (does not add image pull secrets to deployed pods)"
    },
    {
      "isRequired": "true",
      "name": "metrics.extraFlags",
      "value": "\"\"",
      "description": "Additional command line flags"
    },
    {
      "isRequired": "true",
      "name": "metrics.extraUri",
      "value": "\"\"",
      "description": "Additional URI options of the metrics service"
    },
    {
      "isRequired": "true",
      "name": "metrics.service.type",
      "value": "ClusterIP file",
      "description": "Type of the Prometheus metrics service"
    },
    {
      "isRequired": "true",
      "name": "metrics.service.port",
      "value": "9216",
      "description": "Port of the Prometheus metrics service"
    },
    {
      "isRequired": "true",
      "name": "metrics.service.annotations",
      "value": "Check values.yaml file",
      "description": "Annotations for Prometheus metrics service"
    },
    {
      "isRequired": "true",
      "name": "metrics.resources.limits",
      "value": "{}",
      "description": "The resources limits for Prometheus exporter  containers"
    },
    {
      "isRequired": "true",
      "name": "metrics.resources.requests",
      "value": "{}",
      "description": "The requested resources for Prometheus exporter  containers"
    },
    {
      "isRequired": "true",
      "name": "metrics.livenessProbe",
      "value": "Check values.yaml file",
      "description": "Liveness probe configuration for Prometheus exporter"
    },
    {
      "isRequired": "true",
      "name": "metrics.readinessProbe",
      "value": "Check values.yaml file",
      "description": "Readiness probe configuration for Prometheus exporter"
    },
    {
      "isRequired": "true",
      "name": "metrics.serviceMonitor.enabled",
      "value": "false",
      "description": "Create ServiceMonitor Resource for scraping metrics using Prometheus Operator"
    },
    {
      "isRequired": "true",
      "name": "metrics.serviceMonitor.namespace",
      "value": "monitoring",
      "description": "Namespace which Prometheus is running in"
    },
    {
      "isRequired": "true",
      "name": "metrics.serviceMonitor.interval",
      "value": "30s",
      "description": "Interval at which metrics should be scraped"
    },
    {
      "isRequired": "true",
      "name": "metrics.serviceMonitor.additionalLabels",
      "value": "{}",
      "description": "Used to pass Labels that are required by the Installed Prometheus Operator"
    },
    {
      "isRequired": "true",
      "name": "metrics.prometheusRule.enabled",
      "value": "false",
      "description": "Set this to true to create prometheusRules for Prometheus operator"
    },
    {
      "isRequired": "true",
      "name": "metrics.prometheusRule.namespace",
      "value": "monitoring",
      "description": "namespace where prometheusRules resource should be created"
    },
    {
      "isRequired": "true",
      "name": "metrics.prometheusRule.rules",
      "value": "[]",
      "description": "Rules to be created, check values for an example."
    },
    {
      "isRequired": "true",
      "name": "metrics.prometheusRule.additionalLabels",
      "value": "{}",
      "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus"
    }
  ]
}