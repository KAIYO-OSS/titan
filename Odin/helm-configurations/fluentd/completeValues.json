{"values": [{"isRequired": "false", "name": "global.imageRegistry", "value": "nil", "description": "Global Docker image registry"}, {"isRequired": "true", "name": "global.imagePullSecrets", "value": "[] (does not add image pull secrets to deployed pods)", "description": "Global Docker registry secret names as an array"}, {"isRequired": "true", "name": "image.registry", "value": "docker.io", "description": "Fluentd image registry"}, {"isRequired": "true", "name": "image.repository", "value": "bitnami/fluentd", "description": "Fluentd image name"}, {"isRequired": "true", "name": "image.tag", "value": "{TAG_NAME}", "description": "Fluentd image tag"}, {"isRequired": "true", "name": "image.pullPolicy", "value": "IfNotPresent", "description": "Fluentd image pull policy"}, {"isRequired": "true", "name": "image.pullSecrets", "value": "[] (does not add image pull secrets to deployed pods)", "description": "Specify docker-registry secret names as an array"}, {"isRequired": "false", "name": "nameOverride", "value": "nil", "description": "String to partially override fluentd.fullname template with a string (will prepend the release name)"}, {"isRequired": "false", "name": "fullnameOverride", "value": "nil", "description": "String to fully override fluentd.fullname template with a string"}, {"isRequired": "true", "name": "clusterDomain", "value": "cluster.local", "description": "Kubernetes DNS domain name to use"}, {"isRequired": "true", "name": "forwarder.enabled", "value": "true", "description": "Enable Fluentd forwarder"}, {"isRequired": "true", "name": "forwarder.daemonUser", "value": "root", "description": "Fluentd forwarder daemon system user"}, {"isRequired": "true", "name": "forwarder.daemonGroup", "value": "root", "description": "Fluentd forwarder daemon system group"}, {"isRequired": "true", "name": "forwarder.securityContext.enabled", "value": "true", "description": "Enable security context for forwarder pods"}, {"isRequired": "true", "name": "forwarder.securityContext.fsGroup", "value": "0", "description": "Group ID for forwarder's containers filesystem"}, {"isRequired": "true", "name": "forwarder.securityContext.runAsUser", "value": "0", "description": "User ID for forwarder's containers"}, {"isRequired": "true", "name": "forwarder.configFile", "value": "fluentd.conf", "description": "Name of the config file that will be used by Fluentd at launch under the /opt/bitnami/fluentd/conf directory"}, {"isRequired": "false", "name": "forwarder.configMap", "value": "nil", "description": "Name of the config map that contains the Fluentd configuration files"}, {"isRequired": "false", "name": "forwarder.extraArgs", "value": "nil", "description": "Extra arguments for the Fluentd command line"}, {"isRequired": "true", "name": "forwarder.extraEnv", "value": "[]", "description": "Extra environment variables to pass to the container"}, {"isRequired": "true", "name": "forwarder.containerPorts", "value": "Check values.yaml", "description": "Ports the forwarder containers will listen on"}, {"isRequired": "true", "name": "forwarder.service.type", "value": "ClusterIP", "description": "Kubernetes service type (ClusterIP, NodePort, or LoadBalancer) for the forwarders"}, {"isRequired": "true", "name": "forwarder.service.ports", "value": "Check values.yaml file", "description": "Array containing the forwarder service ports"}, {"isRequired": "false", "name": "forwarder.service.loadBalancerIP", "value": "nil", "description": "loadBalancerIP if service type is LoadBalancer"}, {"isRequired": "true", "name": "forwarder.service.loadBalancerSourceRanges", "value": "[]", "description": "Addresses that are allowed when service is LoadBalancer"}, {"isRequired": "false", "name": "forwarder.service.clusterIP", "value": "nil", "description": "Static clusterIP or None for headless services"}, {"isRequired": "true", "name": "forwarder.service.annotations", "value": "{}", "description": "Annotations for the forwarder service"}, {"isRequired": "true", "name": "forwarder.livenessProbe.enabled", "value": "true", "description": "Enable liveness probes for the forwarder"}, {"isRequired": "true", "name": "forwarder.livenessProbe.initialDelaySeconds", "value": "60", "description": "Delay before liveness probe is initiated"}, {"isRequired": "true", "name": "forwarder.livenessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "forwarder.livenessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "forwarder.livenessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "forwarder.livenessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed."}, {"isRequired": "true", "name": "forwarder.readinessProbe.enabled", "value": "true", "description": "Enable readiness probes for the forwarder"}, {"isRequired": "true", "name": "forwarder.readinessProbe.initialDelaySeconds", "value": "5", "description": "Delay before readiness probe is initiated"}, {"isRequired": "true", "name": "forwarder.readinessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "forwarder.readinessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "forwarder.readinessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "forwarder.readinessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed."}, {"isRequired": "true", "name": "forwarder.updateStrategy", "value": "RollingUpdate", "description": "Update strategy for the forwarder DaemonSet"}, {"isRequired": "false", "name": "forwarder.resources", "value": "nil", "description": "Configure resource requests and limits"}, {"isRequired": "true", "name": "forwarder.nodeSelector", "value": "{}", "description": "Node labels for pod assignment"}, {"isRequired": "true", "name": "forwarder.tolerations", "value": "[]", "description": "Tolerations for pod assignment"}, {"isRequired": "true", "name": "forwarder.affinity", "value": "{}", "description": "Affinity for pod assignment"}, {"isRequired": "true", "name": "forwarder.podAnnotations", "value": "{}", "description": "Pod annotations"}, {"isRequired": "false", "name": "forwarder.extraVolumes", "value": "nil", "description": "Extra volumes"}, {"isRequired": "false", "name": "forwarder.extraVolumeMounts", "value": "nil", "description": "Mount extra volume(s),"}, {"isRequired": "true", "name": "aggregator.enabled", "value": "true", "description": "Enable Fluentd aggregator"}, {"isRequired": "true", "name": "aggregator.replicaCount", "value": "2", "description": "Number of aggregator pods to deploy in the Stateful Set"}, {"isRequired": "true", "name": "aggregator.securityContext.enabled", "value": "true", "description": "Enable security context for aggregator pods"}, {"isRequired": "true", "name": "aggregator.securityContext.fsGroup", "value": "1001", "description": "Group ID for aggregator's containers filesystem"}, {"isRequired": "true", "name": "aggregator.securityContext.runAsUser", "value": "1001", "description": "User ID for aggregator's containers"}, {"isRequired": "true", "name": "aggregator.configFile", "value": "fluentd.conf", "description": "Name of the config file that will be used by Fluentd at launch under the /opt/bitnami/fluentd/conf directory"}, {"isRequired": "false", "name": "aggregator.configMap", "value": "nil", "description": "Name of the config map that contains the Fluentd configuration files"}, {"isRequired": "true", "name": "aggregator.port", "value": "24224", "description": "Kubernetes Service port - Fluentd transport port for the aggregators"}, {"isRequired": "false", "name": "aggregator.extraArgs", "value": "nil", "description": "Extra arguments for the Fluentd command line"}, {"isRequired": "true", "name": "aggregator.extraEnv", "value": "[]", "description": "Extra environment variables to pass to the container"}, {"isRequired": "true", "name": "aggregator.containerPorts", "value": "Check values.yaml", "description": "Ports the aggregator containers will listen on"}, {"isRequired": "true", "name": "aggregator.service.type", "value": "ClusterIP", "description": "Kubernetes service type (ClusterIP, NodePort, or LoadBalancer) for the aggregators"}, {"isRequired": "true", "name": "aggregator.service.ports", "value": "Check values.yaml file", "description": "Array containing the aggregator service ports"}, {"isRequired": "false", "name": "aggregator.service.loadBalancerIP", "value": "nil", "description": "loadBalancerIP if service type is LoadBalancer"}, {"isRequired": "true", "name": "aggregator.service.loadBalancerSourceRanges", "value": "[]", "description": "Addresses that are allowed when service is LoadBalancer"}, {"isRequired": "false", "name": "aggregator.service.clusterIP", "value": "nil", "description": "Static clusterIP or None for headless services"}, {"isRequired": "true", "name": "aggregator.service.annotations", "value": "{}", "description": "Annotations for the aggregator service"}, {"isRequired": "true", "name": "aggregator.persistence.enabled", "value": "false", "description": "Enable persistence volume for the aggregator"}, {"isRequired": "false", "name": "aggregator.persistence.storageClass", "value": "nil", "description": "Persistent Volume storage class"}, {"isRequired": "true", "name": "aggregator.persistence.accessMode", "value": "ReadWriteOnce", "description": "Persistent Volume access mode"}, {"isRequired": "true", "name": "aggregator.persistence.size", "value": "10Gi", "description": "Persistent Volume size"}, {"isRequired": "true", "name": "aggregator.livenessProbe.enabled", "value": "true", "description": "Enable liveness probes for the aggregator"}, {"isRequired": "true", "name": "aggregator.livenessProbe.initialDelaySeconds", "value": "60", "description": "Delay before liveness probe is initiated"}, {"isRequired": "true", "name": "aggregator.livenessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "aggregator.livenessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "aggregator.livenessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "aggregator.livenessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed."}, {"isRequired": "true", "name": "aggregator.readinessProbe.enabled", "value": "true", "description": "Enable readiness probes for the aggregator"}, {"isRequired": "true", "name": "aggregator.readinessProbe.initialDelaySeconds", "value": "5", "description": "Delay before readiness probe is initiated"}, {"isRequired": "true", "name": "aggregator.readinessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "aggregator.readinessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "aggregator.readinessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "aggregator.readinessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed."}, {"isRequired": "true", "name": "aggregator.updateStrategy", "value": "RollingUpdate", "description": "Update strategy for the aggregator DaemonSet"}, {"isRequired": "false", "name": "aggregator.resources", "value": "nil", "description": "Configure resource requests and limits"}, {"isRequired": "true", "name": "aggregator.nodeSelector", "value": "{}", "description": "Node labels for pod assignment"}, {"isRequired": "true", "name": "aggregator.tolerations", "value": "[]", "description": "Tolerations for pod assignment"}, {"isRequired": "true", "name": "aggregator.affinity", "value": "{}", "description": "Affinity for pod assignment"}, {"isRequired": "true", "name": "aggregator.podAnnotations", "value": "{}", "description": "Pod annotations"}, {"isRequired": "true", "name": "serviceAccount.create", "value": "true", "description": "Specify whether a ServiceAccount should be created"}, {"isRequired": "true", "name": "serviceAccount.name", "value": "Generated using the fluentd.fullname template", "description": "The name of the ServiceAccount to create"}, {"isRequired": "true", "name": "rbac.create", "value": "true", "description": "Specify whether RBAC resources should be created and used"}, {"isRequired": "false", "name": "metrics.enabled", "value": "nil", "description": "Enable the export of Prometheus metrics"}, {"isRequired": "true", "name": "metrics.service.type", "value": "ClusterIP", "description": "Prometheus metrics service type"}, {"isRequired": "false", "name": "metrics.service.loadBalancerIP", "value": "nil", "description": "Load Balancer IP if the Prometheus metrics server type is LoadBalancer"}, {"isRequired": "true", "name": "metrics.service.port", "value": "24231", "description": "Prometheus metrics service port"}, {"isRequired": "true", "name": "metrics.service.annotations", "value": "{ prometheus.io/scrape: \"true\", prometheus.io/port: \"80\", prometheus.io/path: \"_prometheus/metrics\" }", "description": "Annotations for Prometheus metrics service"}, {"isRequired": "true", "name": "metrics.serviceMonitor.enabled", "value": "false", "description": "if true, creates a Prometheus Operator ServiceMonitor (also requires metrics.enabled to be true)"}, {"isRequired": "false", "name": "metrics.serviceMonitor.namespace", "value": "nil", "description": "Namespace in which Prometheus is running"}, {"isRequired": "false", "name": "metrics.serviceMonitor.interval", "value": "nil (Prometheus Operator default value)", "description": "Interval at which metrics should be scraped."}, {"isRequired": "false", "name": "metrics.serviceMonitor.scrapeTimeout", "value": "nil (Prometheus Operator default value)", "description": "Timeout after which the scrape is ended"}, {"isRequired": "false", "name": "metrics.serviceMonitor.selector", "value": "nil", "description": "Prometheus instance selector labels"}, {"isRequired": "true", "name": "tls.enabled", "value": "false", "description": "Enable the addition of TLS certificates"}, {"isRequired": "true", "name": "tls.caCertificate", "value": "Certificate Authority (CA) bundle content", "description": "Ca certificate"}, {"isRequired": "true", "name": "tls.serverCertificate", "value": "Server certificate content", "description": "Server certificate"}, {"isRequired": "true", "name": "tls.serverKey", "value": "Server private key content", "description": "Server Key"}, {"isRequired": "false", "name": "tls.existingSecret", "value": "nil", "description": "Existing secret with certificate content"}]}