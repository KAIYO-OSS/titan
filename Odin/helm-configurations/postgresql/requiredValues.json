{"values": [{"isRequired": "true", "name": "global.imagePullSecrets", "value": "[]", "description": "Global Docker registry secret names as an array (does not add image pull secrets to deployed pods)"}, {"isRequired": "true", "name": "image.registry", "value": "docker.io", "description": "PostgreSQL Image registry"}, {"isRequired": "true", "name": "image.repository", "value": "bitnami/postgresql", "description": "PostgreSQL Image name"}, {"isRequired": "true", "name": "image.tag", "value": "{TAG_NAME}", "description": "PostgreSQL Image tag"}, {"isRequired": "true", "name": "image.pullPolicy", "value": "IfNotPresent", "description": "PostgreSQL Image pull policy"}, {"isRequired": "true", "name": "image.debug", "value": "false", "description": "Specify if debug values should be set"}, {"isRequired": "true", "name": "volumePermissions.enabled", "value": "false", "description": "Enable init container that changes volume permissions in the data directory (for cases where the default k8s runAsUser and fsUser values do not work)"}, {"isRequired": "true", "name": "volumePermissions.image.registry", "value": "docker.io", "description": "Init container volume-permissions image registry"}, {"isRequired": "true", "name": "volumePermissions.image.repository", "value": "bitnami/minideb", "description": "Init container volume-permissions image name"}, {"isRequired": "true", "name": "volumePermissions.image.tag", "value": "buster", "description": "Init container volume-permissions image tag"}, {"isRequired": "true", "name": "volumePermissions.image.pullPolicy", "value": "Always", "description": "Init container volume-permissions image pull policy"}, {"isRequired": "true", "name": "volumePermissions.securityContext.runAsUser", "value": "0", "description": "User ID for the init container (when facing issues in OpenShift or uid unknown, try value \"auto\")"}, {"isRequired": "true", "name": "usePasswordFile", "value": "false", "description": "Have the secrets mounted as a file instead of env vars"}, {"isRequired": "true", "name": "ldap.enabled", "value": "false", "description": "Enable LDAP support"}, {"isRequired": "true", "name": "replication.enabled", "value": "false", "description": "Enable replication"}, {"isRequired": "true", "name": "replication.user", "value": "repl_user", "description": "Replication user"}, {"isRequired": "true", "name": "replication.password", "value": "repl_password", "description": "Replication user password"}, {"isRequired": "true", "name": "replication.slaveReplicas", "value": "1", "description": "Number of slaves replicas"}, {"isRequired": "true", "name": "replication.synchronousCommit", "value": "off", "description": "Set synchronous commit mode. Allowed values: on, remote_apply, remote_write, local and off"}, {"isRequired": "true", "name": "replication.numSynchronousReplicas", "value": "0", "description": "Number of replicas that will have synchronous replication. Note: Cannot be greater than replication.slaveReplicas."}, {"isRequired": "true", "name": "replication.applicationName", "value": "my_application", "description": "Cluster application name. Useful for advanced replication settings"}, {"isRequired": "true", "name": "postgresqlPostgresPassword", "value": "_random 10 character alphanumeric string_", "description": "PostgreSQL admin password (used when postgresqlUsername is not postgres, in which casepostgres is the admin username)."}, {"isRequired": "true", "name": "postgresqlUsername", "value": "postgres", "description": "PostgreSQL user (creates a non-admin user when postgresqlUsername is not postgres)"}, {"isRequired": "true", "name": "postgresqlPassword", "value": "_random 10 character alphanumeric string_", "description": "PostgreSQL user password"}, {"isRequired": "true", "name": "postgresqlDataDir", "value": "/bitnami/postgresql", "description": "PostgreSQL data dir folder (same value as persistence.mountPath)"}, {"isRequired": "true", "name": "extraEnv", "value": "[]", "description": "Any extra environment variables you would like to pass on to the pod. The value is evaluated as a template."}, {"isRequired": "true", "name": "service.type", "value": "ClusterIP", "description": "Kubernetes Service type"}, {"isRequired": "true", "name": "service.port", "value": "5432", "description": "PostgreSQL port"}, {"isRequired": "true", "name": "service.annotations", "value": "{}", "description": "Annotations for PostgreSQL service (evaluated as a template)"}, {"isRequired": "true", "name": "service.loadBalancerSourceRanges", "value": "[]", "description": "Address that are allowed when svc is LoadBalancer (evaluated as a template)"}, {"isRequired": "true", "name": "shmVolume.enabled", "value": "true", "description": "Enable emptyDir volume for /dev/shm for master and slave(s) Pod(s)"}, {"isRequired": "true", "name": "shmVolume.chmod.enabled", "value": "true", "description": "Run at init chmod 777 of the /dev/shm (ignored if volumePermissions.enabled is false)"}, {"isRequired": "true", "name": "persistence.enabled", "value": "true", "description": "Enable persistence using PVC"}, {"isRequired": "true", "name": "persistence.mountPath", "value": "/bitnami/postgresql", "description": "Path to mount the volume at"}, {"isRequired": "true", "name": "persistence.subPath", "value": "\"\"", "description": "Subdirectory of the volume to mount at"}, {"isRequired": "true", "name": "persistence.accessModes", "value": "[ReadWriteOnce]", "description": "PVC Access Mode for PostgreSQL volume"}, {"isRequired": "true", "name": "persistence.size", "value": "8Gi", "description": "PVC Storage Request for PostgreSQL volume"}, {"isRequired": "true", "name": "persistence.annotations", "value": "{}", "description": "Annotations for the PVC"}, {"isRequired": "true", "name": "commonAnnotations", "value": "{}", "description": "Annotations to be added to all deployed resources (rendered as a template)"}, {"isRequired": "true", "name": "master.nodeSelector", "value": "{}", "description": "Node labels for pod assignment (postgresql master)"}, {"isRequired": "true", "name": "master.affinity", "value": "{}", "description": "Affinity labels for pod assignment (postgresql master)"}, {"isRequired": "true", "name": "master.tolerations", "value": "[]", "description": "Toleration labels for pod assignment (postgresql master)"}, {"isRequired": "true", "name": "master.anotations", "value": "{}", "description": "Map of annotations to add to the statefulset (postgresql master)"}, {"isRequired": "true", "name": "master.labels", "value": "{}", "description": "Map of labels to add to the statefulset (postgresql master)"}, {"isRequired": "true", "name": "master.podAnnotations", "value": "{}", "description": "Map of annotations to add to the pods (postgresql master)"}, {"isRequired": "true", "name": "master.podLabels", "value": "{}", "description": "Map of labels to add to the pods (postgresql master)"}, {"isRequired": "true", "name": "master.extraInitContainers", "value": "[]", "description": "Additional init containers to add to the pods (postgresql master)"}, {"isRequired": "true", "name": "master.extraVolumeMounts", "value": "[]", "description": "Additional volume mounts to add to the pods (postgresql master)"}, {"isRequired": "true", "name": "master.extraVolumes", "value": "[]", "description": "Additional volumes to add to the pods (postgresql master)"}, {"isRequired": "true", "name": "master.sidecars", "value": "[]", "description": "Add additional containers to the pod"}, {"isRequired": "true", "name": "slave.nodeSelector", "value": "{}", "description": "Node labels for pod assignment (postgresql slave)"}, {"isRequired": "true", "name": "slave.affinity", "value": "{}", "description": "Affinity labels for pod assignment (postgresql slave)"}, {"isRequired": "true", "name": "slave.tolerations", "value": "[]", "description": "Toleration labels for pod assignment (postgresql slave)"}, {"isRequired": "true", "name": "slave.anotations", "value": "{}", "description": "Map of annotations to add to the statefulsets (postgresql slave)"}, {"isRequired": "true", "name": "slave.labels", "value": "{}", "description": "Map of labels to add to the statefulsets (postgresql slave)"}, {"isRequired": "true", "name": "slave.podAnnotations", "value": "{}", "description": "Map of annotations to add to the pods (postgresql slave)"}, {"isRequired": "true", "name": "slave.podLabels", "value": "{}", "description": "Map of labels to add to the pods (postgresql slave)"}, {"isRequired": "true", "name": "slave.extraInitContainers", "value": "[]", "description": "Additional init containers to add to the pods (postgresql slave)"}, {"isRequired": "true", "name": "slave.extraVolumeMounts", "value": "[]", "description": "Additional volume mounts to add to the pods (postgresql slave)"}, {"isRequired": "true", "name": "slave.extraVolumes", "value": "[]", "description": "Additional volumes to add to the pods (postgresql slave)"}, {"isRequired": "true", "name": "slave.sidecars", "value": "[]", "description": "Add additional containers to the pod"}, {"isRequired": "true", "name": "resources", "value": "Memory: 256Mi, CPU: 250m", "description": "CPU/Memory resource requests/limits"}, {"isRequired": "true", "name": "securityContext.enabled", "value": "true", "description": "Enable security context"}, {"isRequired": "true", "name": "securityContext.fsGroup", "value": "1001", "description": "Group ID for the container"}, {"isRequired": "true", "name": "securityContext.runAsUser", "value": "1001", "description": "User ID for the container"}, {"isRequired": "true", "name": "serviceAccount.enabled", "value": "false", "description": "Enable service account (Note: Service Account will only be automatically created if serviceAccount.name is not set)"}, {"isRequired": "true", "name": "livenessProbe.enabled", "value": "true", "description": "Would you like a livenessProbe to be enabled"}, {"isRequired": "true", "name": "networkPolicy.enabled", "value": "false", "description": "Enable NetworkPolicy"}, {"isRequired": "true", "name": "networkPolicy.allowExternal", "value": "true", "description": "Don't require client label for connections"}, {"isRequired": "true", "name": "networkPolicy.explicitNamespacesSelector", "value": "{}", "description": "A Kubernetes LabelSelector to explicitly select namespaces from which ingress traffic could be allowed"}, {"isRequired": "true", "name": "livenessProbe.initialDelaySeconds", "value": "30", "description": "Delay before liveness probe is initiated"}, {"isRequired": "true", "name": "livenessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "livenessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "livenessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "livenessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed"}, {"isRequired": "true", "name": "readinessProbe.enabled", "value": "true", "description": "would you like a readinessProbe to be enabled"}, {"isRequired": "true", "name": "readinessProbe.initialDelaySeconds", "value": "5", "description": "Delay before readiness probe is initiated"}, {"isRequired": "true", "name": "readinessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "readinessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "readinessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "readinessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed"}, {"isRequired": "true", "name": "tls.enabled", "value": "false", "description": "Enable TLS traffic support"}, {"isRequired": "true", "name": "tls.preferServerCiphers", "value": "true", "description": "Whether to use the server's TLS cipher preferences rather than the client's"}, {"isRequired": "true", "name": "tls.certFilename", "value": "\"\"", "description": "Certificate filename"}, {"isRequired": "true", "name": "tls.certKeyFilename", "value": "\"\"", "description": "Certificate key filename"}, {"isRequired": "true", "name": "metrics.enabled", "value": "false", "description": "Start a prometheus exporter"}, {"isRequired": "true", "name": "metrics.service.type", "value": "ClusterIP", "description": "Kubernetes Service type"}, {"isRequired": "true", "name": "metrics.service.annotations", "value": "{ prometheus.io/scrape: \"true\", prometheus.io/port: \"9187\"}", "description": "Additional annotations for metrics exporter pod"}, {"isRequired": "true", "name": "metrics.serviceMonitor.enabled", "value": "false", "description": "Set this to true to create ServiceMonitor for Prometheus operator"}, {"isRequired": "true", "name": "metrics.serviceMonitor.additionalLabels", "value": "{}", "description": "Additional labels that can be used so ServiceMonitor will be discovered by Prometheus"}, {"isRequired": "true", "name": "metrics.prometheusRule.enabled", "value": "false", "description": "Set this to true to create prometheusRules for Prometheus operator"}, {"isRequired": "true", "name": "metrics.prometheusRule.additionalLabels", "value": "{}", "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus"}, {"isRequired": "true", "name": "metrics.prometheusRule.namespace", "value": "the same namespace as postgresql", "description": "namespace where prometheusRules resource should be created"}, {"isRequired": "true", "name": "metrics.prometheusRule.rules", "value": "[]", "description": "[rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) to be created, check values for an example."}, {"isRequired": "true", "name": "metrics.image.registry", "value": "docker.io", "description": "PostgreSQL Exporter Image registry"}, {"isRequired": "true", "name": "metrics.image.repository", "value": "bitnami/postgres-exporter", "description": "PostgreSQL Exporter Image name"}, {"isRequired": "true", "name": "metrics.image.tag", "value": "{TAG_NAME}", "description": "PostgreSQL Exporter Image tag"}, {"isRequired": "true", "name": "metrics.image.pullPolicy", "value": "IfNotPresent", "description": "PostgreSQL Exporter Image pull policy"}, {"isRequired": "true", "name": "metrics.extraEnvVars", "value": "{}", "description": "Extra environment variables to add to exporter (evaluated as a template)"}, {"isRequired": "true", "name": "metrics.securityContext.enabled", "value": "false", "description": "Enable security context for metrics"}, {"isRequired": "true", "name": "metrics.securityContext.runAsUser", "value": "1001", "description": "User ID for the container for metrics"}, {"isRequired": "true", "name": "metrics.livenessProbe.initialDelaySeconds", "value": "30", "description": "Delay before liveness probe is initiated"}, {"isRequired": "true", "name": "metrics.livenessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "metrics.livenessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "metrics.livenessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "metrics.livenessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed"}, {"isRequired": "true", "name": "metrics.readinessProbe.enabled", "value": "true", "description": "would you like a readinessProbe to be enabled"}, {"isRequired": "true", "name": "metrics.readinessProbe.initialDelaySeconds", "value": "5", "description": "Delay before liveness probe is initiated"}, {"isRequired": "true", "name": "metrics.readinessProbe.periodSeconds", "value": "10", "description": "How often to perform the probe"}, {"isRequired": "true", "name": "metrics.readinessProbe.timeoutSeconds", "value": "5", "description": "When the probe times out"}, {"isRequired": "true", "name": "metrics.readinessProbe.failureThreshold", "value": "6", "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."}, {"isRequired": "true", "name": "metrics.readinessProbe.successThreshold", "value": "1", "description": "Minimum consecutive successes for the probe to be considered successful after having failed"}, {"isRequired": "true", "name": "updateStrategy", "value": "{type: \"RollingUpdate\"}", "description": "Update strategy policy"}, {"isRequired": "true", "name": "psp.create", "value": "false", "description": "Create Pod Security Policy"}, {"isRequired": "true", "name": "rbac.create", "value": "false", "description": "Create Role and RoleBinding (required for PSP to work)"}]}