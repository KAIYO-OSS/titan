{
    "values": [{
        "isRequired": "true",
        "name": "global.imagePullSecrets",
        "value": "[]",
        "description": "Global Docker registry secret names as an array (does not add image pull secrets to deployed pods)"
    }, {
        "isRequired": "true",
        "name": "image.registry",
        "value": "docker.io",
        "description": "Redis Image registry"
    }, {
        "isRequired": "true",
        "name": "image.repository",
        "value": "bitnami/redis",
        "description": "Redis Image name"
    }, {
        "isRequired": "true",
        "name": "image.tag",
        "value": "{TAG_NAME}",
        "description": "Redis Image tag"
    }, {
        "isRequired": "true",
        "name": "image.pullPolicy",
        "value": "IfNotPresent",
        "description": "Image pull policy"
    }, {
        "isRequired": "true",
        "name": "cluster.enabled",
        "value": "true",
        "description": "Use master-slave topology"
    }, {
        "isRequired": "true",
        "name": "cluster.slaveCount",
        "value": "2",
        "description": "Number of slaves"
    }, {
        "isRequired": "true",
        "name": "usePassword",
        "value": "true",
        "description": "Use password"
    }, {
        "isRequired": "true",
        "name": "usePasswordFile",
        "value": "false",
        "description": "Mount passwords as files instead of environment variables"
    }, {
        "isRequired": "true",
        "name": "password",
        "value": "Randomly generated",
        "description": "Redis password (ignored if existingSecret set)"
    }, {
        "isRequired": "true",
        "name": "configmap",
        "value": "See values.yaml",
        "description": "Additional common Redis node configuration (this value is evaluated as a template)"
    }, {
        "isRequired": "true",
        "name": "clusterDomain",
        "value": "cluster.local",
        "description": "Kubernetes DNS Domain name to use"
    }, {
        "isRequired": "true",
        "name": "networkPolicy.enabled",
        "value": "false",
        "description": "Enable NetworkPolicy"
    }, {
        "isRequired": "true",
        "name": "networkPolicy.allowExternal",
        "value": "true",
        "description": "Don't require client label for connections"
    }, {
        "isRequired": "true",
        "name": "networkPolicy.ingressNSMatchLabels",
        "value": "{}",
        "description": "Allow connections from other namespaces"
    }, {
        "isRequired": "true",
        "name": "networkPolicy.ingressNSPodMatchLabels",
        "value": "{}",
        "description": "For other namespaces match by pod labels and namespace labels"
    }, {
        "isRequired": "true",
        "name": "securityContext.enabled",
        "value": "true",
        "description": "Enable security context (both redis master and slave pods)"
    }, {
        "isRequired": "true",
        "name": "securityContext.fsGroup",
        "value": "1001",
        "description": "Group ID for the container (both redis master and slave pods)"
    }, {
        "isRequired": "true",
        "name": "securityContext.runAsUser",
        "value": "1001",
        "description": "User ID for the container (both redis master and slave pods)"
    }, {
        "isRequired": "true",
        "name": "serviceAccount.create",
        "value": "false",
        "description": "Specifies whether a ServiceAccount should be created"
    }, {
        "isRequired": "true",
        "name": "serviceAccount.name",
        "value": "Generated using the fullname template",
        "description": "The name of the ServiceAccount to create"
    }, {
        "isRequired": "true",
        "name": "rbac.create",
        "value": "false",
        "description": "Specifies whether RBAC resources should be created"
    }, {
        "isRequired": "true",
        "name": "rbac.role.rules",
        "value": "[]",
        "description": "Rules to create"
    }, {
        "isRequired": "true",
        "name": "metrics.enabled",
        "value": "false",
        "description": "Start a side-car prometheus exporter"
    }, {
        "isRequired": "true",
        "name": "metrics.image.registry",
        "value": "docker.io",
        "description": "Redis exporter image registry"
    }, {
        "isRequired": "true",
        "name": "metrics.image.repository",
        "value": "bitnami/redis-exporter",
        "description": "Redis exporter image name"
    }, {
        "isRequired": "true",
        "name": "metrics.image.tag",
        "value": "{TAG_NAME}",
        "description": "Redis exporter image tag"
    }, {
        "isRequired": "true",
        "name": "metrics.image.pullPolicy",
        "value": "IfNotPresent",
        "description": "Image pull policy"
    }, {
        "isRequired": "true",
        "name": "metrics.extraArgs",
        "value": "{}",
        "description": "Extra arguments for the binary; possible values [here](https://github.com/oliver006/redis_exporter#flags)"
    }, {
        "isRequired": "true",
        "name": "metrics.podLabels",
        "value": "{}",
        "description": "Additional labels for Metrics exporter pod"
    }, {
        "isRequired": "true",
        "name": "metrics.podAnnotations",
        "value": "{}",
        "description": "Additional annotations for Metrics exporter pod"
    }, {
        "isRequired": "true",
        "name": "metrics.resources",
        "value": "Memory: 256Mi, CPU: 100m",
        "description": "Exporter resource requests/limit"
    }, {
        "isRequired": "true",
        "name": "metrics.serviceMonitor.enabled",
        "value": "false",
        "description": "if true, creates a Prometheus Operator ServiceMonitor (also requires metrics.enabled to be true)"
    }, {
        "isRequired": "true",
        "name": "metrics.serviceMonitor.selector",
        "value": "{ prometheus: kube-prometheus }",
        "description": "Default to kube-prometheus install (CoreOS recommended), but should be set according to Prometheus install"
    }, {
        "isRequired": "true",
        "name": "metrics.service.type",
        "value": "ClusterIP",
        "description": "Kubernetes Service type (redis metrics)"
    }, {
        "isRequired": "true",
        "name": "metrics.service.annotations",
        "value": "{}",
        "description": "Annotations for the services to monitor  (redis master and redis slave service)"
    }, {
        "isRequired": "true",
        "name": "metrics.service.labels",
        "value": "{}",
        "description": "Additional labels for the metrics service"
    }, {
        "isRequired": "true",
        "name": "metrics.priorityClassName",
        "value": "{}",
        "description": "Metrics exporter pod priorityClassName"
    }, {
        "isRequired": "true",
        "name": "metrics.prometheusRule.enabled",
        "value": "false",
        "description": "Set this to true to create prometheusRules for Prometheus operator"
    }, {
        "isRequired": "true",
        "name": "metrics.prometheusRule.additionalLabels",
        "value": "{}",
        "description": "Additional labels that can be used so prometheusRules will be discovered by Prometheus"
    }, {
        "isRequired": "true",
        "name": "metrics.prometheusRule.namespace",
        "value": "Same namespace as redis",
        "description": "namespace where prometheusRules resource should be created"
    }, {
        "isRequired": "true",
        "name": "metrics.prometheusRule.rules",
        "value": "[]",
        "description": "[rules](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) to be created, check values for an example."
    }, {
        "isRequired": "true",
        "name": "master.persistence.enabled",
        "value": "true",
        "description": "Use a PVC to persist data (master node)"
    }, {
        "isRequired": "true",
        "name": "master.persistence.path",
        "value": "/data",
        "description": "Path to mount the volume at, to use other images"
    }, {
        "isRequired": "true",
        "name": "master.persistence.subPath",
        "value": "\"\"",
        "description": "Subdirectory of the volume to mount at"
    }, {
        "isRequired": "true",
        "name": "master.persistence.storageClass",
        "value": "generic",
        "description": "Storage class of backing PVC"
    }, {
        "isRequired": "true",
        "name": "master.persistence.accessModes",
        "value": "[ReadWriteOnce]",
        "description": "Persistent Volume Access Modes"
    }, {
        "isRequired": "true",
        "name": "master.persistence.size",
        "value": "8Gi",
        "description": "Size of data volume"
    }, {
        "isRequired": "true",
        "name": "master.persistence.matchLabels",
        "value": "{}",
        "description": "matchLabels persistent volume selector"
    }, {
        "isRequired": "true",
        "name": "master.persistence.matchExpressions",
        "value": "{}",
        "description": "matchExpressions persistent volume selector"
    }, {
        "isRequired": "true",
        "name": "master.statefulset.updateStrategy",
        "value": "onDelete",
        "description": "Update strategy for StatefulSet"
    }, {
        "isRequired": "true",
        "name": "master.podLabels",
        "value": "{}",
        "description": "Additional labels for Redis master pod"
    }, {
        "isRequired": "true",
        "name": "master.podAnnotations",
        "value": "{}",
        "description": "Additional annotations for Redis master pod"
    }, {
        "isRequired": "true",
        "name": "master.extraEnvVars",
        "value": "[]",
        "description": "Additional Environement Variables passed to the pod of the master's stateful set set"
    }, {
        "isRequired": "true",
        "name": "master.extraEnvVarCMs",
        "value": "[]",
        "description": "Additional Environement Variables  ConfigMappassed to the pod of the master's stateful set set"
    }, {
        "isRequired": "true",
        "name": "master.extraEnvVarsSecret",
        "value": "[]",
        "description": "Additional Environement Variables Secret passed to the master's stateful set"
    }, {
        "isRequired": "true",
        "name": "podDisruptionBudget.enabled",
        "value": "false",
        "description": "Pod Disruption Budget toggle"
    }, {
        "isRequired": "true",
        "name": "podDisruptionBudget.minAvailable",
        "value": "1",
        "description": "Minimum available pods"
    }, {
        "isRequired": "true",
        "name": "redisPort",
        "value": "6379",
        "description": "Redis port (in both master and slaves)"
    }, {
        "isRequired": "true",
        "name": "tls.enabled",
        "value": "false",
        "description": "Enable TLS support for replication traffic"
    }, {
        "isRequired": "true",
        "name": "tls.authClients",
        "value": "true",
        "description": "Require clients to authenticate or not"
    }, {
        "isRequired": "true",
        "name": "master.command",
        "value": "/run.sh",
        "description": "Redis master entrypoint string. The command redis-server is executed if this is not provided."
    }, {
        "isRequired": "true",
        "name": "master.disableCommands",
        "value": "[\"FLUSHDB\", \"FLUSHALL\"]",
        "description": "Array of Redis commands to disable (master)"
    }, {
        "isRequired": "true",
        "name": "master.extraFlags",
        "value": "[]",
        "description": "Redis master additional command line flags"
    }, {
        "isRequired": "true",
        "name": "master.nodeSelector",
        "value": "{\"beta.kubernetes.io/arch\": \"amd64\"}",
        "description": "Redis master Node labels for pod assignment"
    }, {
        "isRequired": "true",
        "name": "master.tolerations",
        "value": "[]",
        "description": "Toleration labels for Redis master pod assignment"
    }, {
        "isRequired": "true",
        "name": "master.affinity",
        "value": "{}",
        "description": "Affinity settings for Redis master pod assignment"
    }, {
        "isRequired": "true",
        "name": "master.service.type",
        "value": "ClusterIP",
        "description": "Kubernetes Service type (redis master)"
    }, {
        "isRequired": "true",
        "name": "master.service.port",
        "value": "6379",
        "description": "Kubernetes Service port (redis master)"
    }, {
        "isRequired": "true",
        "name": "master.service.annotations",
        "value": "{}",
        "description": "annotations for redis master service"
    }, {
        "isRequired": "true",
        "name": "master.service.labels",
        "value": "{}",
        "description": "Additional labels for redis master service"
    }, {
        "isRequired": "true",
        "name": "master.resources",
        "value": "Memory: 256Mi, CPU: 100m",
        "description": "Redis master CPU/Memory resource requests/limits"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.enabled",
        "value": "true",
        "description": "Turn on and off liveness probe (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before liveness probe is initiated (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.timeoutSeconds",
        "value": "5",
        "description": "When the probe times out (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.livenessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.enabled",
        "value": "true",
        "description": "Turn on and off readiness probe (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before readiness probe is initiated (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.timeoutSeconds",
        "value": "1",
        "description": "When the probe times out (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis master pod)"
    }, {
        "isRequired": "true",
        "name": "master.readinessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."
    }, {
        "isRequired": "true",
        "name": "master.shareProcessNamespace",
        "value": "false",
        "description": "Redis Master pod shareProcessNamespace option. Enables /pause reap zombie PIDs."
    }, {
        "isRequired": "true",
        "name": "master.priorityClassName",
        "value": "{}",
        "description": "Redis Master pod priorityClassName"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.enabled",
        "value": "false",
        "description": "Enable init container that changes volume permissions in the registry (for cases where the default k8s runAsUser and fsUser values do not work)"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.image.registry",
        "value": "docker.io",
        "description": "Init container volume-permissions image registry"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.image.repository",
        "value": "bitnami/minideb",
        "description": "Init container volume-permissions image name"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.image.tag",
        "value": "buster",
        "description": "Init container volume-permissions image tag"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.image.pullPolicy",
        "value": "Always",
        "description": "Init container volume-permissions image pull policy"
    }, {
        "isRequired": "true",
        "name": "volumePermissions.resources       ",
        "value": "{}",
        "description": "Init container volume-permissions CPU/Memory resource requests/limits"
    }, {
        "isRequired": "true",
        "name": "slave.service.type",
        "value": "ClusterIP",
        "description": "Kubernetes Service type (redis slave)"
    }, {
        "isRequired": "true",
        "name": "slave.service.annotations",
        "value": "{}",
        "description": "annotations for redis slave service"
    }, {
        "isRequired": "true",
        "name": "slave.service.labels",
        "value": "{}",
        "description": "Additional labels for redis slave service"
    }, {
        "isRequired": "true",
        "name": "slave.service.port",
        "value": "6379",
        "description": "Kubernetes Service port (redis slave)"
    }, {
        "isRequired": "true",
        "name": "slave.command",
        "value": "/run.sh",
        "description": "Redis slave entrypoint array. The docker image's ENTRYPOINT is used if this is not provided."
    }, {
        "isRequired": "true",
        "name": "slave.disableCommands",
        "value": "[FLUSHDB, FLUSHALL]",
        "description": "Array of Redis commands to disable (slave)"
    }, {
        "isRequired": "true",
        "name": "slave.extraFlags",
        "value": "[]",
        "description": "Redis slave additional command line flags"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.enabled",
        "value": "true",
        "description": "Turn on and off liveness probe (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before liveness probe is initiated (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.timeoutSeconds",
        "value": "5",
        "description": "When the probe times out (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.livenessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.enabled",
        "value": "true",
        "description": "Turn on and off slave.readiness probe (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before slave.readiness probe is initiated (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.timeoutSeconds",
        "value": "1",
        "description": "When the probe times out (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.readinessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. (redis slave pod)"
    }, {
        "isRequired": "true",
        "name": "slave.shareProcessNamespace",
        "value": "false",
        "description": "Redis slave pod shareProcessNamespace option. Enables /pause reap zombie PIDs."
    }, {
        "isRequired": "true",
        "name": "slave.persistence.enabled",
        "value": "true",
        "description": "Use a PVC to persist data (slave node)"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.path",
        "value": "/data",
        "description": "Path to mount the volume at, to use other images"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.subPath",
        "value": "\"\"",
        "description": "Subdirectory of the volume to mount at"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.storageClass",
        "value": "generic",
        "description": "Storage class of backing PVC"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.accessModes",
        "value": "[ReadWriteOnce]",
        "description": "Persistent Volume Access Modes"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.size",
        "value": "8Gi",
        "description": "Size of data volume"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.matchLabels",
        "value": "{}",
        "description": "matchLabels persistent volume selector"
    }, {
        "isRequired": "true",
        "name": "slave.persistence.matchExpressions",
        "value": "{}",
        "description": "matchExpressions persistent volume selector"
    }, {
        "isRequired": "true",
        "name": "slave.statefulset.updateStrategy",
        "value": "onDelete",
        "description": "Update strategy for StatefulSet"
    }, {
        "isRequired": "true",
        "name": "slave.extraEnvVars",
        "value": "[]",
        "description": "Additional Environement Variables passed to the pod of the slave's stateful set set"
    }, {
        "isRequired": "true",
        "name": "slave.extraEnvVarCMs",
        "value": "[]",
        "description": "Additional Environement Variables  ConfigMappassed to the pod of the slave's stateful set set"
    }, {
        "isRequired": "true",
        "name": "masslaveter.extraEnvVarsSecret",
        "value": "[]",
        "description": "Additional Environement Variables Secret passed to the slave's stateful set"
    }, {
        "isRequired": "true",
        "name": "slave.podLabels",
        "value": "master.podLabels",
        "description": "Additional labels for Redis slave pod"
    }, {
        "isRequired": "true",
        "name": "slave.podAnnotations",
        "value": "master.podAnnotations",
        "description": "Additional annotations for Redis slave pod"
    }, {
        "isRequired": "true",
        "name": "slave.resources",
        "value": "{}",
        "description": "Redis slave CPU/Memory resource requests/limits"
    }, {
        "isRequired": "true",
        "name": "slave.affinity",
        "value": "{}",
        "description": "Enable node/pod affinity for slaves"
    }, {
        "isRequired": "true",
        "name": "slave.tolerations",
        "value": "[]",
        "description": "Toleration labels for Redis slave pod assignment"
    }, {
        "isRequired": "true",
        "name": "slave.spreadConstraints",
        "value": "{}",
        "description": "[Topology Spread Constraints](https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/) for Redis slave pod"
    }, {
        "isRequired": "true",
        "name": "slave.priorityClassName",
        "value": "{}",
        "description": "Redis Slave pod priorityClassName"
    }, {
        "isRequired": "true",
        "name": "sentinel.enabled",
        "value": "false",
        "description": "Enable sentinel containers"
    }, {
        "isRequired": "true",
        "name": "sentinel.usePassword",
        "value": "true",
        "description": "Use password for sentinel containers"
    }, {
        "isRequired": "true",
        "name": "sentinel.masterSet",
        "value": "mymaster",
        "description": "Name of the sentinel master set"
    }, {
        "isRequired": "true",
        "name": "sentinel.initialCheckTimeout",
        "value": "5",
        "description": "Timeout for querying the redis sentinel service for the active sentinel list"
    }, {
        "isRequired": "true",
        "name": "sentinel.quorum",
        "value": "2",
        "description": "Quorum for electing a new master"
    }, {
        "isRequired": "true",
        "name": "sentinel.downAfterMilliseconds",
        "value": "60000",
        "description": "Timeout for detecting a Redis node is down"
    }, {
        "isRequired": "true",
        "name": "sentinel.failoverTimeout",
        "value": "18000",
        "description": "Timeout for performing a election failover"
    }, {
        "isRequired": "true",
        "name": "sentinel.parallelSyncs",
        "value": "1",
        "description": "Number of parallel syncs in the cluster"
    }, {
        "isRequired": "true",
        "name": "sentinel.port",
        "value": "26379",
        "description": "Redis Sentinel port"
    }, {
        "isRequired": "true",
        "name": "sentinel.staticID",
        "value": "false",
        "description": "Enable static IDs for sentinel replicas (If disabled IDs will be randomly generated on startup)"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.type",
        "value": "ClusterIP",
        "description": "Kubernetes Service type (redis sentinel)"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.annotations",
        "value": "{}",
        "description": "annotations for redis sentinel service"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.labels",
        "value": "{}",
        "description": "Additional labels for redis sentinel service"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.redisPort",
        "value": "6379",
        "description": "Kubernetes Service port for Redis read only operations"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.sentinelPort",
        "value": "26379",
        "description": "Kubernetes Service port for Redis sentinel"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.redisNodePort",
        "value": "",
        "description": "Kubernetes Service node port for Redis read only operations"
    }, {
        "isRequired": "true",
        "name": "sentinel.service.sentinelNodePort",
        "value": "",
        "description": "Kubernetes Service node port for Redis sentinel"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.enabled",
        "value": "true",
        "description": "Turn on and off liveness probe (redis sentinel pod)"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before liveness probe is initiated (redis sentinel pod)"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.timeoutSeconds",
        "value": "5",
        "description": "When the probe times out (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.livenessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded."
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.enabled",
        "value": "true",
        "description": "Turn on and off sentinel.readiness probe (redis sentinel pod)"
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.initialDelaySeconds",
        "value": "5",
        "description": "Delay before sentinel.readiness probe is initiated (redis sentinel pod)"
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.periodSeconds",
        "value": "5",
        "description": "How often to perform the probe (redis sentinel pod)"
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.timeoutSeconds",
        "value": "1",
        "description": "When the probe times out (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.successThreshold",
        "value": "1",
        "description": "Minimum consecutive successes for the probe to be considered successful after having failed (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.readinessProbe.failureThreshold",
        "value": "5",
        "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded. (redis sentinel container)"
    }, {
        "isRequired": "true",
        "name": "sentinel.resources",
        "value": "{}",
        "description": "Redis sentinel CPU/Memory resource requests/limits"
    }, {
        "isRequired": "true",
        "name": "sentinel.image.registry",
        "value": "docker.io",
        "description": "Redis Sentinel Image registry"
    }, {
        "isRequired": "true",
        "name": "sentinel.image.repository",
        "value": "bitnami/redis-sentinel",
        "description": "Redis Sentinel Image name"
    }, {
        "isRequired": "true",
        "name": "sentinel.image.tag",
        "value": "{TAG_NAME}",
        "description": "Redis Sentinel Image tag"
    }, {
        "isRequired": "true",
        "name": "sentinel.image.pullPolicy",
        "value": "IfNotPresent",
        "description": "Image pull policy"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.enabled",
        "value": "false",
        "description": "Enable an init container to modify Kernel settings"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.command",
        "value": "[]",
        "description": "sysctlImage command to execute"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.registry",
        "value": "docker.io",
        "description": "sysctlImage Init container registry"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.repository",
        "value": "bitnami/minideb",
        "description": "sysctlImage Init container name"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.tag",
        "value": "buster",
        "description": "sysctlImage Init container tag"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.pullPolicy",
        "value": "Always",
        "description": "sysctlImage Init container pull policy"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.mountHostSys",
        "value": "false",
        "description": "Mount the host /sys folder to /host-sys"
    }, {
        "isRequired": "true",
        "name": "sysctlImage.resources",
        "value": "{}",
        "description": "sysctlImage Init container CPU/Memory resource requests/limits"
    }, {
        "isRequired": "true",
        "name": "podSecurityPolicy.create",
        "value": "false",
        "description": "Specifies whether a PodSecurityPolicy should be created"
    }]
}